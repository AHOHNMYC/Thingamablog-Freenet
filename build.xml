<?xml version="1.0"?>
<project name="Thingamablog" basedir="." default="all">
		
	<target name="init">

		<property name="version" value="1.0.6" />

		<!-- comment out the following property if you're not under win32 or don't have nsis -->
		<property name="makensis" location="C:/program files/nsis/makensis.exe"/> 

		<!-- name for prefixing distributables -->
		<property name="dist_file" value="thingamablog-${version}" />
		<property name="project_name" value="Thingamablog" />
		<property name="jar_file" value="thingamablog.jar" />

		<!-- dirs needed for the build process -->
		<property name="src_dir" value="./src" />
		<property name="dicts_dir" value="./dictionaries" />
		<property name="build_dir" value="./build" />
		<property name="lib_dir" value="./lib" />
		<property name="templates_dir" value="./templates" />
		<property name="class_dir" value="${build_dir}/classes" />
		<property name="app_dir" value="${build_dir}/app" />
		<property name="jar_dir" value="${app_dir}/thingamablog-${version}" />
		<property name="rpm_dir" value="${build_dir}/rpm" />
		<property name="dist_dir" value="${build_dir}/dist" />
		<property name="installer_dir" value="./installer" />

		<!-- jar manifest sets the cp. This property includes requiered the libs -->
		<property name="classpath_jars" value="lib/lang.zip lib/browser.jar lib/rtext.jar lib/userguide.zip lib/jsch.jar lib/tb_legacy.jar lib/jhall.jar lib/jhelpaction.jar lib/plastic-1.2.1.jar lib/rome-0.6.jar lib/hsqldb.jar lib/jdom.jar lib/edtftpj-1.4.7.jar lib/jdatepicker.jar lib/jmyspell.jar lib/commons-codec-1.3.jar lib/tagsoup-1.0rc3.jar lib/xmlrpc-2.0.jar" />

		<!-- windows installer properties -->
		<property name="exe_file" value="${installer_dir}/win/thinga.exe" />
		<property name="launcher_cfg" value="${installer_dir}/win/launcher.cfg" />
		<property name="nsi_file" value="${installer_dir}/win/installer.nsi" />
		<property name="temp_nsi" location="${jar_dir}/temp.nsi" />
		<property name="nsis_out" location="${dist_dir}/thinga-setup-${version}.exe" />


		<!--
 		Create the directories where we put all the build products. 
		-->
		<mkdir dir="${build_dir}" />
		<mkdir dir="${class_dir}" />
		<mkdir dir="${jar_dir}" />
		<mkdir dir="${dist_dir}" />
		<echo message="Initializing" />
	</target>

	<target name="compile" depends="init" description="Compile the app">
		<tstamp />
		<buildnumber />
		<move file="${src_dir}/net/sf/thingamablog/TBGlobals.java" tofile="${src_dir}/net/sf/thingamablog/~~TBGlobals.java" />
		<copy file="${src_dir}/net/sf/thingamablog/~~TBGlobals.java" tofile="${src_dir}/net/sf/thingamablog/TBGlobals.java" />
		<replace file="${src_dir}/net/sf/thingamablog/TBGlobals.java" token="@VERSION@" value="${version}" />
		<replace file="${src_dir}/net/sf/thingamablog/TBGlobals.java" token="@BUILD@" value="${DSTAMP}.${build.number}" />

		<javac srcdir="${src_dir}" source="1.4" destdir="${class_dir}" excludes="**/Cvs/**,**/*.ini,**/~*" optimize="on" deprecation="true" fork="true">
			<classpath>
				<fileset dir="${lib_dir}" includes="*.jar, *.zip" />
			</classpath>
			<!-- We're still assuming most users are running jre 1.4 or so -->
			<!-- So we're not going to worry about jdk 5.0 warnings yet -->
			<!-- <compilerarg value="-Xlint:unchecked"/> -->
		</javac>
		<move file="${src_dir}/net/sf/thingamablog/~~TBGlobals.java" tofile="${src_dir}/net/sf/thingamablog/TBGlobals.java" />
		<delete file="${src_dir}/net/sf/thingamablog/~~TBGlobals.java" />
		<!--
         Copy files needed to run the software to destinations in the 
         build directory. I do this because I usually pull all binary files like
         this from inside the Jar files that make up my application rather than
         having them loose. So they need to be copied to the class dir so they
         get included in the Jar file for the application. 
        -->
		<copy todir="${class_dir}">
			<fileset dir="${src_dir}">
				<include name="**/*.gif" />
				<include name="**/*.jpg" />
				<include name="**/*.png" />
				<include name="**/*.wav" />
				<include name="**/*.css" />
				<include name="**/*.properties" />
			</fileset>
		</copy>
	</target>

	<target name="jar" depends="init,compile" description="Jar the app and create the app dir">
		<jar jarfile="${jar_dir}/${jar_file}" compress="true" basedir="${class_dir}">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<!-- 
      			seems like there ought to be a way to get each jar name
      			and add it to the Class-Path attribute programatically
      			-->
				<attribute name="Class-Path" value="${classpath_jars}" />
				<attribute name="Main-Class" value="net.sf.thingamablog.App" />
			</manifest>
		</jar>

		<!-- copy the libs to the jar dir -->
		<copy todir="${jar_dir}/lib">
			<fileset dir="${lib_dir}" />
		</copy>

		<!-- copy the dictionaries to the jar dir -->
		<copy todir="${jar_dir}/dictionaries">
			<fileset dir="${dicts_dir}" />
		</copy>

		<!-- copy the sample templates to the jar dir -->
		<copy todir="${jar_dir}/templates">
			<fileset dir="${templates_dir}" />
		</copy>

		<!-- copy any text and icon files to the jar dir -->
		<copy todir="${jar_dir}">
			<fileset dir="." includes="*.txt" />
			<fileset dir="." includes="*.ico" />
			<fileset dir="." includes="*.bat" />
			<fileset dir="." includes="*.sh" />
		</copy>
	</target>

	<target name="run" depends="jar" description="Run the program">
		<java jar="${jar_dir}/${jar_file}" fork="yes" />
	</target>

	<target name="all" depends="distrib" description="Build everything">
		<echo message="Application built." />
	</target>

	<target name="distrib" depends="jar" description="Create basic distributables (.zip, .tar.gz, src.zip)">
		<!-- create a tar.gz file -->
		<!--
		<tar tarfile="${dist_dir}/${dist_file}.tar" basedir="${app_dir}" />
		<gzip zipfile="${dist_dir}/${dist_file}.tar.gz" src="${dist_dir}/${dist_file}.tar" />
		<delete file="${dist_dir}/${dist_file}.tar" />
		-->

		<!-- create a zip file -->
		<zip destfile="${dist_dir}/${dist_file}.zip" basedir="${app_dir}" />

		<!-- create a src zip file -->
		<mkdir dir="${jar_dir}/src" />
		<copy todir="${jar_dir}/src">
			<fileset dir="${src_dir}" />
		</copy>
		<copy todir="${jar_dir}">
			<fileset dir="." includes="build.xml" />
			<fileset dir="." includes="build.number" />
		</copy>
		<copy todir="${jar_dir}/installer">
			<fileset dir="${installer_dir}" />
		</copy>

		<zip destfile="${dist_dir}/${dist_file}-src.zip" basedir="${app_dir}" excludes="**/${jar_file}" />
	</target>


	<target name="distrib-rpm" depends="jar" description="Create an rpm distrib">

		<mkdir dir="${rpm_dir}" />
		<mkdir dir="${rpm_dir}/SOURCES" />
		<mkdir dir="${rpm_dir}/SPECS" />
		<mkdir dir="${rpm_dir}/BUILD" />
		<mkdir dir="${rpm_dir}/RPMS" />
		<mkdir dir="${rpm_dir}/RPMS/noarch" />

		<copy toDir="${rpm_dir}/SPECS/" file="${installer_dir}/linux/tamb.spec" />
		<replace file="${rpm_dir}/SPECS/tamb.spec" token="@VERSION@" value="${version}" />


		<copy toDir="${jar_dir}" file="${installer_dir}/linux/run.sh" />
		<replace file="${jar_dir}/run.sh" token="@VERSION@" value="${version}" />
		<!-- create a tar file -->
		<tar tarfile="${rpm_dir}/SOURCES/${dist_file}.tar" basedir="${app_dir}" />

		<rpm specFile="tamb.spec" command="-bb --target noarch" topDir="${rpm_dir}" error="${rpm_dir}/error.txt" output="${rpm_dir}/output.txt" />

		<copy toDir="${dist_dir}" file="${rpm_dir}/RPMS/noarch/thingamablog-${version}-0.noarch.rpm" />

	</target>

	<target name="distrib-nsis" depends="distrib" if="makensis" description="Create a windows installer distrib with NSIS">

		<!-- copy the exe that starts thingamablog to the jar dir -->
		<copy file="${exe_file}" todir="${jar_dir}" />
		<copy file="${launcher_cfg}" todir="${jar_dir}" />
		<copy file="${nsi_file}" tofile="${temp_nsi}" />
		<copy toDir="${jar_dir}" file="${installer_dir}/win/run.bat" />
		
		<replace file="${temp_nsi}" token="@OUTFILE@" value="${nsis_out}" />
		<replace file="${temp_nsi}" token="@VERSION@" value="${version}" />

		<exec executable="${makensis}">
			<arg value="${temp_nsi}" />
		</exec>
		<delete file="${temp_nsi}" />
		
	</target>
	
	
	<target name="clean" depends="init" description="Clean all build products">
		<delete dir="${build_dir}" />
	</target>

</project>
